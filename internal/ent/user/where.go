// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/christfirst/uriel/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// AuthProvider applies equality check predicate on the "auth_provider" field. It's identical to AuthProviderEQ.
func AuthProvider(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAuthProvider, v))
}

// OauthID applies equality check predicate on the "oauth_id" field. It's identical to OauthIDEQ.
func OauthID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOauthID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// AuthProviderEQ applies the EQ predicate on the "auth_provider" field.
func AuthProviderEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAuthProvider, v))
}

// AuthProviderNEQ applies the NEQ predicate on the "auth_provider" field.
func AuthProviderNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAuthProvider, v))
}

// AuthProviderIn applies the In predicate on the "auth_provider" field.
func AuthProviderIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAuthProvider, vs...))
}

// AuthProviderNotIn applies the NotIn predicate on the "auth_provider" field.
func AuthProviderNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAuthProvider, vs...))
}

// AuthProviderGT applies the GT predicate on the "auth_provider" field.
func AuthProviderGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAuthProvider, v))
}

// AuthProviderGTE applies the GTE predicate on the "auth_provider" field.
func AuthProviderGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAuthProvider, v))
}

// AuthProviderLT applies the LT predicate on the "auth_provider" field.
func AuthProviderLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAuthProvider, v))
}

// AuthProviderLTE applies the LTE predicate on the "auth_provider" field.
func AuthProviderLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAuthProvider, v))
}

// AuthProviderContains applies the Contains predicate on the "auth_provider" field.
func AuthProviderContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAuthProvider, v))
}

// AuthProviderHasPrefix applies the HasPrefix predicate on the "auth_provider" field.
func AuthProviderHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAuthProvider, v))
}

// AuthProviderHasSuffix applies the HasSuffix predicate on the "auth_provider" field.
func AuthProviderHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAuthProvider, v))
}

// AuthProviderIsNil applies the IsNil predicate on the "auth_provider" field.
func AuthProviderIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAuthProvider))
}

// AuthProviderNotNil applies the NotNil predicate on the "auth_provider" field.
func AuthProviderNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAuthProvider))
}

// AuthProviderEqualFold applies the EqualFold predicate on the "auth_provider" field.
func AuthProviderEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAuthProvider, v))
}

// AuthProviderContainsFold applies the ContainsFold predicate on the "auth_provider" field.
func AuthProviderContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAuthProvider, v))
}

// OauthIDEQ applies the EQ predicate on the "oauth_id" field.
func OauthIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOauthID, v))
}

// OauthIDNEQ applies the NEQ predicate on the "oauth_id" field.
func OauthIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOauthID, v))
}

// OauthIDIn applies the In predicate on the "oauth_id" field.
func OauthIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOauthID, vs...))
}

// OauthIDNotIn applies the NotIn predicate on the "oauth_id" field.
func OauthIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOauthID, vs...))
}

// OauthIDGT applies the GT predicate on the "oauth_id" field.
func OauthIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOauthID, v))
}

// OauthIDGTE applies the GTE predicate on the "oauth_id" field.
func OauthIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOauthID, v))
}

// OauthIDLT applies the LT predicate on the "oauth_id" field.
func OauthIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOauthID, v))
}

// OauthIDLTE applies the LTE predicate on the "oauth_id" field.
func OauthIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOauthID, v))
}

// OauthIDContains applies the Contains predicate on the "oauth_id" field.
func OauthIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOauthID, v))
}

// OauthIDHasPrefix applies the HasPrefix predicate on the "oauth_id" field.
func OauthIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOauthID, v))
}

// OauthIDHasSuffix applies the HasSuffix predicate on the "oauth_id" field.
func OauthIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOauthID, v))
}

// OauthIDIsNil applies the IsNil predicate on the "oauth_id" field.
func OauthIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOauthID))
}

// OauthIDNotNil applies the NotNil predicate on the "oauth_id" field.
func OauthIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOauthID))
}

// OauthIDEqualFold applies the EqualFold predicate on the "oauth_id" field.
func OauthIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOauthID, v))
}

// OauthIDContainsFold applies the ContainsFold predicate on the "oauth_id" field.
func OauthIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOauthID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
